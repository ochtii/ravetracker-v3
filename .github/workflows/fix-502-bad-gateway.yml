name: Fix 502 Bad Gateway

on:
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Fix Type'
        required: true
        default: 'start-app'
        type: choice
        options:
        - start-app
        - static-fallback
        - full-diagnosis
        - nginx-config

jobs:
  diagnose-502:
    runs-on: ubuntu-latest
    
    steps:
    - name: Diagnose 502 Bad Gateway
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 120s
        command_timeout: 60s
        script: |
          echo "🔍 Diagnosing 502 Bad Gateway Error"
          echo "==================================="
          echo "📅 $(date)"
          echo "👤 User: $(whoami)"
          echo "🖥️ Server: $(hostname)"
          echo ""
          
          # Check if port 3000 is listening
          echo "📡 Checking port 3000 (SvelteKit app):"
          if netstat -tlnp 2>/dev/null | grep :3000 || ss -tlnp 2>/dev/null | grep :3000; then
            echo "✅ Something is listening on port 3000"
          else
            echo "❌ Nothing is listening on port 3000"
            echo "💡 This is likely the cause of the 502 error"
          fi
          
          # Check for Node.js processes
          echo ""
          echo "🔍 Checking Node.js processes:"
          ps aux | grep node | grep -v grep || echo "❌ No Node.js processes found"
          
          # Check for npm processes
          echo ""
          echo "📦 Checking npm processes:"
          ps aux | grep npm | grep -v grep || echo "❌ No npm processes found"
          
          # Test local connection to port 3000
          echo ""
          echo "🧪 Testing connection to localhost:3000:"
          if curl -s --connect-timeout 3 http://localhost:3000 >/dev/null; then
            echo "✅ Port 3000 responds to HTTP requests"
          else
            echo "❌ Port 3000 does not respond"
          fi
          
          # Check NGINX configuration
          echo ""
          echo "📝 Checking NGINX proxy configuration:"
          if [ -f "/etc/nginx/sites-enabled/ravetracker-v3" ]; then
            echo "🔍 Proxy settings:"
            grep -n "proxy_pass\|upstream" /etc/nginx/sites-enabled/ravetracker-v3 || echo "No proxy configuration found"
          else
            echo "❌ No NGINX configuration found"
          fi
          
          # Check project directory
          echo ""
          echo "📁 Checking project directory:"
          if [ -d "/var/www/ravetracker-v3" ]; then
            echo "✅ Project directory exists"
            ls -la /var/www/ravetracker-v3/
            
            # Check for package.json
            if [ -f "/var/www/ravetracker-v3/package.json" ]; then
              echo "✅ package.json found"
            else
              echo "❌ package.json not found"
            fi
            
            # Check for build directory
            if [ -d "/var/www/ravetracker-v3/build" ]; then
              echo "✅ build directory exists"
            else
              echo "❌ build directory not found"
            fi
          else
            echo "❌ Project directory does not exist"
          fi
          
          # Check NGINX error logs for 502 errors
          echo ""
          echo "📄 Recent NGINX error logs (502 related):"
          tail -20 /var/log/nginx/error.log 2>/dev/null | grep -i "502\|upstream\|connect" || echo "No 502 errors found in logs"

  start-application:
    runs-on: ubuntu-latest
    needs: [diagnose-502]
    if: github.event.inputs.fix_type == 'start-app' || github.event.inputs.fix_type == 'full-diagnosis'
    
    steps:
    - name: Start SvelteKit Application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 120s
        command_timeout: 60s
        script: |
          echo "🚀 Starting SvelteKit Application"
          echo "================================="
          
          # Create app start script
          cat > ~/start_ravetracker_app.sh << 'EOF'
          #!/bin/bash
          
          echo "🚀 Starting RaveTracker v3.0 Application"
          echo "========================================"
          
          cd /var/www/ravetracker-v3
          
          # Check if we're in the right directory
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found. Are we in the right directory?"
            echo "Current directory: $(pwd)"
            echo "Contents:"
            ls -la
            exit 1
          fi
          
          echo "✅ Found package.json"
          
          # Kill any existing Node.js processes on port 3000
          echo "🛑 Stopping existing processes on port 3000..."
          pkill -f "node.*3000" 2>/dev/null || echo "No processes to kill"
          sleep 2
          
          # Install dependencies if needed
          if [ ! -d "node_modules" ]; then
            echo "📦 Installing dependencies..."
            npm install
          else
            echo "✅ Dependencies already installed"
          fi
          
          # Build the application if no build directory
          if [ ! -d "build" ]; then
            echo "🏗️ Building application..."
            npm run build
          else
            echo "✅ Build directory exists"
          fi
          
          # Start the application
          echo "🌟 Starting SvelteKit server on port 3000..."
          echo "💡 This will run in the background"
          
          # Start in background with logging
          nohup npm start > logs/app.log 2>&1 &
          APP_PID=$!
          echo "🆔 Application PID: $APP_PID"
          
          # Wait a moment for startup
          sleep 5
          
          # Check if it's running
          if ps -p $APP_PID > /dev/null; then
            echo "✅ Application process is running"
            
            # Test if port 3000 is responding
            if curl -s --connect-timeout 5 http://localhost:3000 >/dev/null; then
              echo "✅ Application is responding on port 3000"
              echo "🎉 SvelteKit server started successfully!"
            else
              echo "⚠️ Application started but not yet responding"
              echo "💡 Check logs: tail -f /var/www/ravetracker-v3/logs/app.log"
            fi
          else
            echo "❌ Application failed to start"
            echo "📄 Error logs:"
            tail -10 logs/app.log 2>/dev/null || echo "No logs available"
          fi
          
          echo ""
          echo "📊 Current status:"
          echo "- Process: $(ps -p $APP_PID -o pid,cmd --no-headers 2>/dev/null || echo 'Not running')"
          echo "- Port 3000: $(netstat -tlnp 2>/dev/null | grep :3000 || echo 'Not listening')"
          EOF
          
          chmod +x ~/start_ravetracker_app.sh
          echo "✅ App start script created: ~/start_ravetracker_app.sh"
          
          echo ""
          echo "🚀 To start the application:"
          echo "bash ~/start_ravetracker_app.sh"

  static-fallback:
    runs-on: ubuntu-latest
    needs: [diagnose-502]
    if: github.event.inputs.fix_type == 'static-fallback' || github.event.inputs.fix_type == 'full-diagnosis'
    
    steps:
    - name: Configure Static File Fallback
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 90s
        command_timeout: 45s
        script: |
          echo "📄 Configure Static File Fallback"
          echo "================================="
          
          # Create NGINX config without proxy (pure static)
          cat > ~/nginx_static_only.conf << 'EOF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              
              server_name _;
              root /var/www/ravetracker-v3/temp_build;
              index index.html index.htm;
              
              # Logs
              access_log /var/log/nginx/ravetracker-access.log;
              error_log /var/log/nginx/ravetracker-error.log;
              
              # Serve static files only
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              # Cache static assets
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, max-age=31536000";
                  access_log off;
              }
              
              # Health check
              location /health {
                  access_log off;
                  return 200 "RaveTracker v3.0 - Static Mode\n";
                  add_header Content-Type text/plain;
              }
              
              # API endpoints return 503 (service unavailable)
              location /api/ {
                  return 503 "API temporarily unavailable - App not running\n";
                  add_header Content-Type text/plain;
              }
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              
              server_tokens off;
              
              gzip on;
              gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
          }
          EOF
          
          # Create script to apply static config
          cat > ~/apply_static_config.sh << 'EOF'
          #!/bin/bash
          
          echo "📄 Applying static-only NGINX configuration..."
          
          # Backup current config
          sudo cp /etc/nginx/sites-available/ravetracker-v3 /etc/nginx/sites-available/ravetracker-v3.backup.$(date +%Y%m%d_%H%M%S)
          
          # Apply static config
          sudo cp ~/nginx_static_only.conf /etc/nginx/sites-available/ravetracker-v3
          
          # Test and reload
          if sudo nginx -t; then
            echo "✅ Configuration valid"
            sudo systemctl reload nginx
            echo "✅ NGINX reloaded with static-only configuration"
            
            # Test the result
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ || echo "000")
            echo "📊 HTTP Response: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "🎉 Static fallback working! No more 502 errors."
            else
              echo "⚠️ Unexpected response: $HTTP_CODE"
            fi
          else
            echo "❌ Configuration error"
          fi
          EOF
          
          chmod +x ~/apply_static_config.sh
          
          echo "✅ Static fallback configuration created"
          echo ""
          echo "🎯 To apply static-only mode (eliminates 502 errors):"
          echo "bash ~/apply_static_config.sh"
          echo ""
          echo "💡 This will serve only static files, no dynamic features"

  test-fix:
    runs-on: ubuntu-latest
    needs: [start-application, static-fallback]
    if: always()
    
    steps:
    - name: Test 502 Fix
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 60s
        command_timeout: 30s
        script: |
          echo "🧪 Testing 502 Fix"
          echo "=================="
          
          SERVER_IP=$(hostname -I | awk '{print $1}')
          echo "🌐 Server IP: $SERVER_IP"
          echo ""
          
          # Test HTTP response
          echo "1. Testing main page:"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ || echo "000")
          echo "   HTTP Response: $HTTP_CODE"
          
          case $HTTP_CODE in
            200)
              echo "   ✅ SUCCESS! 502 error fixed"
              ;;
            502)
              echo "   ❌ Still getting 502 Bad Gateway"
              echo "   💡 The SvelteKit app is not running"
              ;;
            403)
              echo "   ⚠️ 403 Forbidden - permission issue"
              ;;
            *)
              echo "   ⚠️ Unexpected response: $HTTP_CODE"
              ;;
          esac
          
          # Check port 3000 status
          echo ""
          echo "2. Checking SvelteKit app status:"
          if netstat -tlnp 2>/dev/null | grep -q :3000 || ss -tlnp 2>/dev/null | grep -q :3000; then
            echo "   ✅ App is listening on port 3000"
            
            # Test direct app access
            APP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
            echo "   📱 Direct app response: $APP_CODE"
          else
            echo "   ❌ No app listening on port 3000"
          fi
          
          # Show available scripts
          echo ""
          echo "📋 Available fix scripts:"
          ls -la ~/*ravetracker* ~/*static* ~/*start* 2>/dev/null | grep -E "\.(sh|conf)$" || echo "   No scripts found"
          
          echo ""
          echo "🎯 Next steps based on the test results:"
          echo "========================================"
          
          if [ "$HTTP_CODE" = "502" ]; then
            echo "🔧 For 502 Bad Gateway:"
            echo "1. Start the app: bash ~/start_ravetracker_app.sh"
            echo "2. Or use static mode: bash ~/apply_static_config.sh"
          elif [ "$HTTP_CODE" = "200" ]; then
            echo "🎉 Everything is working!"
            echo "Access your site: http://$SERVER_IP"
          else
            echo "🔍 Investigate the $HTTP_CODE error"
            echo "Check logs: sudo tail -f /var/log/nginx/error.log"
          fi
