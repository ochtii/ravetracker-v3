name: SSH Connection Troubleshooting

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - secrets-check
        - connection-test
        - full-deploy

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Required Secrets
      run: |
        echo "🔍 Checking GitHub Secrets Configuration..."
        echo "=========================================="
        
        # Check if secrets are set (without revealing values)
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ HOST secret is missing or empty"
          echo "💡 Please set HOST in GitHub repository settings > Secrets and variables > Actions"
        else
          echo "✅ HOST secret is configured"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ USERNAME secret is missing or empty"
          echo "💡 Please set USERNAME in GitHub repository settings"
        else
          echo "✅ USERNAME secret is configured"
        fi
        
        if [ -z "${{ secrets.SSH_KEY }}" ]; then
          echo "❌ SSH_KEY secret is missing or empty"
          echo "💡 Please set SSH_KEY in GitHub repository settings"
        else
          echo "✅ SSH_KEY secret is configured"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "⚠️ PORT secret not set (will default to 22)"
        else
          echo "✅ PORT secret is configured"
        fi
        
        echo ""
        echo "📋 Required GitHub Secrets:"
        echo "  - HOST: Your server IP address or domain name"
        echo "  - USERNAME: SSH username (e.g., ubuntu, root, your-user)"
        echo "  - SSH_KEY: Your private SSH key content"
        echo "  - PORT: SSH port (optional, defaults to 22)"

  test-connection:
    needs: check-secrets
    runs-on: ubuntu-latest
    if: "${{ secrets.HOST != '' && secrets.USERNAME != '' && secrets.SSH_KEY != '' }}"
    
    steps:
    - name: Test Basic SSH Connection
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 30s
        command_timeout: 15s
        debug: true
        script: |
          echo "🎉 SSH Connection Successful!"
          echo "================================"
          echo "🏠 Server: $(hostname)"
          echo "👤 User: $(whoami)"
          echo "📍 Directory: $(pwd)"
          echo "🕒 Time: $(date)"
          echo "💾 Disk space:"
          df -h /
          echo ""
          echo "🔍 Checking RaveTracker directory..."
          if [ -d "/var/www/ravetracker-v3" ]; then
            echo "✅ /var/www/ravetracker-v3 exists"
            ls -la /var/www/ravetracker-v3/
          else
            echo "⚠️ /var/www/ravetracker-v3 does not exist"
            echo "📁 Creating directory structure..."
            sudo mkdir -p /var/www/ravetracker-v3
            sudo chown $USER:$USER /var/www/ravetracker-v3
            echo "✅ Directory created"
          fi

  deploy-temp-build:
    needs: test-connection
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full-deploy'
    
    steps:
    - name: Deploy temp_build
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        timeout: 120s
        command_timeout: 60s
        debug: true
        script: |
          echo "🚀 Starting RaveTracker v3.0 temp_build deployment..."
          echo "===================================================="
          
          # Ensure directory exists
          mkdir -p /var/www/ravetracker-v3
          cd /var/www/ravetracker-v3
          
          # Check if auto-update script exists
          if [ -f "auto-update-temp-build.sh" ]; then
            echo "📋 Found auto-update script, using it..."
            chmod +x auto-update-temp-build.sh
            ./auto-update-temp-build.sh
          else
            echo "📁 No auto-update script found, performing manual update..."
            
            # Initialize or update temp_build
            if [ ! -d "temp_build" ]; then
              echo "🔧 Cloning repository..."
              git clone https://github.com/ochtii/ravetracker-v3.git temp_build
            else
              echo "🔄 Updating existing temp_build..."
              cd temp_build
              git fetch origin main
              git reset --hard origin/main
              git clean -fd
              cd ..
            fi
            
            # Copy the auto-update script for future use
            if [ -f "temp_build/auto-update-temp-build.sh" ]; then
              cp temp_build/auto-update-temp-build.sh ./
              chmod +x auto-update-temp-build.sh
              echo "📋 Auto-update script installed for future deployments"
            fi
            
            # Copy other deployment scripts
            if [ -d "temp_build/scripts" ]; then
              cp temp_build/scripts/*.sh ./ 2>/dev/null || echo "No additional scripts found"
              chmod +x *.sh 2>/dev/null || echo "No shell scripts to make executable"
            fi
          fi
          
          echo "✅ temp_build deployment completed successfully!"
          echo "📊 Final status:"
          echo "  - Repository: https://github.com/ochtii/ravetracker-v3"
          echo "  - Directory: /var/www/ravetracker-v3/temp_build"
          echo "  - Timestamp: $(date)"
          
          if [ -d "temp_build" ]; then
            cd temp_build
            echo "  - Current commit: $(git rev-parse --short HEAD)"
            echo "  - Files updated: $(find . -name "*.js" -o -name "*.ts" -o -name "*.svelte" | wc -l) source files"
          fi
